import { Injectable } from '@angular/core';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AdminGuard implements CanActivate {
  // Th√™m bi·∫øn ƒë·ªÉ theo d√µi s·ªë l·∫ßn chuy·ªÉn h∆∞·ªõng
  private redirectCount = 0;
  private MAX_REDIRECTS = 2;
  private lastRedirectTime = 0;

  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    console.log('üîê AdminGuard.canActivate() called for URL:', state.url);
    
    // Ki·ªÉm tra n·∫øu c√≥ qu√° nhi·ªÅu redirect trong th·ªùi gian ng·∫Øn
    const now = Date.now();
    if (now - this.lastRedirectTime < 1000) { // D∆∞·ªõi 1 gi√¢y
      this.redirectCount++;
      console.warn(`‚ö†Ô∏è AdminGuard - Redirect count: ${this.redirectCount}`);
      
      if (this.redirectCount >= this.MAX_REDIRECTS) {
        console.error('üîÑ AdminGuard - Too many redirects detected! Breaking the loop and redirecting to login');
        // Clear local storage ƒë·ªÉ ng·∫Øt loop
        localStorage.clear();
        // Reset counter
        this.redirectCount = 0;
        this.lastRedirectTime = now;
        // Redirect to login
        this.router.navigate(['/login'], { replaceUrl: true });
        return false;
      }
    } else {
      // Reset counter n·∫øu qu√° 1 gi√¢y t·ª´ l·∫ßn redirect tr∆∞·ªõc
      this.redirectCount = 0;
    }
    this.lastRedirectTime = now;
    
    // STEP 1: Ki·ªÉm tra x√°c th·ª±c (ch·ª©c nƒÉng c·ªßa AuthGuard)
    // Ki·ªÉm tra tr·ª±c ti·∫øp token trong localStorage
    let token = null;
    let user = null;
    
    try {
      token = localStorage.getItem('token');
      const userStr = localStorage.getItem('currentUser');
      if (userStr) {
        user = JSON.parse(userStr);
      }
    } catch (e) {
      console.error('‚ùå AdminGuard - Error reading from localStorage:', e);
    }
    
    // Ki·ªÉm tra x√°c th·ª±c v·ªõi AuthService
    const isAuthenticatedInService = this.authService.isAuthenticated();
    
    // K·∫øt lu·∫≠n x√°c th·ª±c d·ª±a tr√™n c·∫£ localStorage v√† service
    const isAuthenticated = !!(token && user) || isAuthenticatedInService;
    
    // N·∫øu ch∆∞a x√°c th·ª±c, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    if (!isAuthenticated) {
      console.log('üö™ AdminGuard: User is not authenticated, redirecting to login');
      this.router.navigate(['/login'], { replaceUrl: true });
      return false;
    }
    
    // STEP 2: Ki·ªÉm tra vai tr√≤ l√† ADMIN (ch·ª©c nƒÉng c·ªßa AdminGuard)
    // L·∫•y th√¥ng tin t·ª´ service
    const userFromService = this.authService.currentUserValue;
    
    // S·ª≠ d·ª•ng user t·ª´ localStorage n·∫øu service kh√¥ng c√≥
    const finalUser = userFromService || user;
    
    // Ki·ªÉm tra email c√≥ ph·∫£i admin kh√¥ng
    const isAdminByEmail = finalUser.email && finalUser.email.includes('admin');
    
    // Ki·ªÉm tra role c√≥ ph·∫£i ADMIN kh√¥ng
    const isAdminByRole = 
      finalUser.role === 'ADMIN' || 
      finalUser.userRole === 'ADMIN' || 
      finalUser.isAdmin === true;
    
    // K·∫øt lu·∫≠n c√≥ ph·∫£i ADMIN kh√¥ng
    const isAdmin = isAdminByEmail || isAdminByRole;
    
    console.log('üëë AdminGuard - Admin check:', {
      email: finalUser.email,
      isAdminByEmail,
      isAdminByRole,
      isAdmin
    });
    
    if (!isAdmin) {
      console.log('‚õî AdminGuard: User is not an admin');
      
      // X√°c ƒë·ªãnh route m·∫∑c ƒë·ªãnh d·ª±a tr√™n role
      let defaultRoute = '/user/dashboard'; // M·∫∑c ƒë·ªãnh
      
      if (finalUser.role === 'HR' || finalUser.userRole === 'HR' || finalUser.isHR === true || 
          (finalUser.email && finalUser.email.includes('hr') && !finalUser.email.includes('admin'))) {
        defaultRoute = '/hr/dashboard';
      }
      
      console.log('üîÑ AdminGuard: Redirecting to', defaultRoute);
      this.router.navigate([defaultRoute], { replaceUrl: true });
    return false;
    }
    
    console.log('‚úÖ AdminGuard: User is an admin, allowing access');
    return true;
  }
} 